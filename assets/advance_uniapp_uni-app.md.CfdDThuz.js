import{_ as i,c as a,o as t,a4 as s}from"./chunks/framework.CxEjwGBq.js";const g=JSON.parse('{"title":"uni-app(仅微信小程序平台)","description":"","frontmatter":{},"headers":[],"relativePath":"advance/uniapp/uni-app.md","filePath":"advance/uniapp/uni-app.md","lastUpdated":1701358147000}'),e={name:"advance/uniapp/uni-app.md"},l=s(`<h1 id="uni-app-仅微信小程序平台" tabindex="-1">uni-app(仅微信小程序平台) <a class="header-anchor" href="#uni-app-仅微信小程序平台" aria-label="Permalink to &quot;uni-app(仅微信小程序平台)&quot;">​</a></h1><p><a href="https://uniapp.dcloud.net.cn/" target="_blank" rel="noreferrer">Uni-app</a> 是一个跨端应用框架，基于 Vue.js，可以帮助开发者快速构建同时运行在多个平台上的移动应用程序。</p><h2 id="工程" tabindex="-1">工程 <a class="header-anchor" href="#工程" aria-label="Permalink to &quot;工程&quot;">​</a></h2><h3 id="创建-uni-app" tabindex="-1">创建 uni-app <a class="header-anchor" href="#创建-uni-app" aria-label="Permalink to &quot;创建 uni-app&quot;">​</a></h3><ul><li>js 开发</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npx degit dcloudio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue#vite my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project</span></span></code></pre></div><ul><li>ts 开发</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npx degit dcloudio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue#vite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ts my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>uni-app 内置组件 TypeScript 类型：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @uni-helper/uni-app-types</span></span></code></pre></div><p>uni-app 扩展组件 TypeScript 类型：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @uni-helper/uni-ui-types</span></span></code></pre></div></div><h3 id="运行-uni-app" tabindex="-1">运行 uni-app <a class="header-anchor" href="#运行-uni-app" aria-label="Permalink to &quot;运行 uni-app&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vue3-project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:mp-weixin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:mp-weixin</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>微信小程序的自定义组件在渲染时会多一级节点，在写样式时需要注意：</p><ul><li>使用 flex 布局时，直接给自定义组件的父元素设置为 display:flex 不能影响到自定义组件内部的根节点，需要设置当前自定义组件为 display:flex 才可以。</li><li>在自定义组件内部设置根元素高度为 100%，不能撑满自定义组件父元素。需要同时设置当前自定义组件高度为 100%才可以。</li></ul></div><h2 id="页面" tabindex="-1">页面 <a class="header-anchor" href="#页面" aria-label="Permalink to &quot;页面&quot;">​</a></h2><h3 id="页面生命周期" tabindex="-1">页面生命周期 <a class="header-anchor" href="#页面生命周期" aria-label="Permalink to &quot;页面生命周期&quot;">​</a></h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，该钩子被调用时，响应式数据、计算属性、方法、侦听器、props、slots 已设置完成，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）</td></tr><tr><td>onShow</td><td>监听页面显示，页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td>onReady</td><td>监听页面初次渲染完成，此时组件已挂载完成，DOM 树($el)已可用，注意如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td>onHide</td><td>监听页面隐藏</td></tr><tr><td>onUnload</td><td>监听页面卸载</td></tr><tr><td>onResize</td><td>监听窗口尺寸变化</td></tr><tr><td>onPullDownRefresh</td><td>监听用户下拉动作，一般用于下拉刷新</td></tr><tr><td>onReachBottom</td><td>页面滚动到底部的事件（不是 scroll-view 滚到底），常用于下拉下一页数据。</td></tr><tr><td>onTabItemTap</td><td>点击 tab 时触发，参数为 Object</td></tr><tr><td>onShareAppMessage</td><td>用户点击右上角分享</td></tr><tr><td>onShareTimeline</td><td>监听用户点击右上角转发到朋友圈</td></tr><tr><td>onAddToFavorites</td><td>监听用户点击右上角收藏</td></tr></tbody></table><h3 id="组件生命周期" tabindex="-1">组件生命周期 <a class="header-anchor" href="#组件生命周期" aria-label="Permalink to &quot;组件生命周期&quot;">​</a></h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onBeforeMount()</td><td>组件被挂载之前</td></tr><tr><td>onMounted()</td><td>组件挂载完成后</td></tr><tr><td>onBeforeUpdate()</td><td>组件即将因为响应式状态变更而更新其 DOM 树之前</td></tr><tr><td>onUpdated()</td><td>组件因为响应式状态变更而更新其 DOM 树之后</td></tr><tr><td>onBeforeUnmount()</td><td>组件实例被卸载之前</td></tr><tr><td>onUnmounted()</td><td>组件实例被卸载之后</td></tr></tbody></table><h3 id="页面调用接口" tabindex="-1">页面调用接口 <a class="header-anchor" href="#页面调用接口" aria-label="Permalink to &quot;页面调用接口&quot;">​</a></h3><ul><li>getApp():用于获取当前应用实例，一般用于获取 globalData。也可通过应用实例调用 App.vue methods 中定义的方法。</li><li>getCurrentPages():用于获取当前页面栈的实例，以数组形式按栈的顺序给出，数组中的元素为页面实例，第一个元素为首页，最后一个元素为当前页面。</li></ul><h3 id="页面通讯" tabindex="-1">页面通讯 <a class="header-anchor" href="#页面通讯" aria-label="Permalink to &quot;页面通讯&quot;">​</a></h3><ul><li>uni.$emit(eventName,OBJECT):触发全局的自定义事件。</li><li>uni.$on(eventName,callback):监听全局的自定义事件。</li><li>uni.$once(eventName,callback):监听全局的自定义事件，仅触发一次。</li><li>uni.$off([eventName, callback]):移除全局自定义事件监听器。</li></ul><h3 id="页面栈" tabindex="-1">页面栈 <a class="header-anchor" href="#页面栈" aria-label="Permalink to &quot;页面栈&quot;">​</a></h3><table><thead><tr><th>路由方式</th><th>页面栈表现</th><th>触发时机</th></tr></thead><tbody><tr><td>初始化</td><td>新页面入栈</td><td>uni-app 打开的第一个页面</td></tr><tr><td>打开新页面</td><td>新页面入栈</td><td>调用 API <code>uni.navigateTo</code> 、使用组件 <code>&lt;navigator open-type=&quot;navigate&quot;/&gt;</code></td></tr><tr><td>页面重定向</td><td>当前页面出栈，新页面入栈</td><td>调用 API <code>uni.redirectTo</code> 、使用组件 <code>&lt;navigator open-type=&quot;redirectTo&quot;/&gt;</code></td></tr><tr><td>页面返回</td><td>页面不断出栈，直到目标返回页</td><td>调用 API <code>uni.navigateBack</code> 、使用组件 <code>&lt;navigator open-type=&quot;navigateBack&quot;/&gt;</code> 、用户按左上角返回按钮、安卓用户点击物理 back 按键</td></tr><tr><td>Tab 切换</td><td>页面全部出栈，只留下新的 Tab 页面</td><td>调用 API <code>uni.switchTab</code> 、使用组件 <code>&lt;navigator open-type=&quot;switchTab&quot;/&gt;</code> 、用户切换 Tab</td></tr><tr><td>重加载</td><td>页面全部出栈，只留下新的页面</td><td>调用 API <code>uni.reLaunch</code> 、使用组件 <code>&lt;navigator open-type=&quot;reLaunch&quot;/&gt;</code></td></tr></tbody></table><h2 id="js-语法" tabindex="-1">JS 语法 <a class="header-anchor" href="#js-语法" aria-label="Permalink to &quot;JS 语法&quot;">​</a></h2><p>uni-app 的 js API 由标准 ECMAScript 的 js API 和 uni 扩展 API 这两部分组成。</p><h2 id="css-语法" tabindex="-1">CSS 语法 <a class="header-anchor" href="#css-语法" aria-label="Permalink to &quot;CSS 语法&quot;">​</a></h2><h3 id="尺寸单位" tabindex="-1">尺寸单位 <a class="header-anchor" href="#尺寸单位" aria-label="Permalink to &quot;尺寸单位&quot;">​</a></h3><p>uni-app 支持的通用 css 单位包括 px、rpx。</p><ul><li>px 即屏幕像素</li><li>rpx 即响应式 px，一种根据屏幕宽度自适应的动态单位。以 750 宽的屏幕为基准，750rpx 恰好为屏幕宽度。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>页面元素宽度在 uni-app 中的宽度计算公式：750 * 元素在设计稿中的宽度 / 设计稿基准宽度</p></div><h3 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>样例</th><th>样例描述</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择所有拥有 class=&quot;intro&quot; 的组件</td></tr><tr><td>#id</td><td>#firstname</td><td>选择拥有 id=&quot;firstname&quot; 的组件</td></tr><tr><td>element</td><td>view</td><td>选择所有 view 组件</td></tr><tr><td>element, element</td><td>view, checkbox</td><td>选择所有文档的 view 组件和所有的 checkbox 组件</td></tr><tr><td>::after</td><td>view::after</td><td>在 view 组件后边插入内容，仅 vue 页面生效</td></tr><tr><td>::before</td><td>view::before</td><td>在 view 组件前边插入内容，仅 vue 页面生效</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">DANGER</p><ul><li>在 uni-app 中不能使用 * 选择器。</li><li>微信小程序自定义组件中仅支持 class 选择器</li><li>page 相当于 body 节点</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置页面背景颜色，使用 scoped 会导致失效 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#ccc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h3 id="内置-css-变量" tabindex="-1">内置 CSS 变量 <a class="header-anchor" href="#内置-css-变量" aria-label="Permalink to &quot;内置 CSS 变量&quot;">​</a></h3><table><thead><tr><th>CSS 变量</th><th>描述</th><th>小程序</th></tr></thead><tbody><tr><td>--status-bar-height</td><td>系统状态栏高度</td><td>25px</td></tr><tr><td>--window-top</td><td>内容区域距离顶部的距离</td><td>0</td></tr><tr><td>--window-bottom</td><td>内容区域距离底部的距离</td><td>0</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>快速书写 css 变量的方法是：在 css 中敲 hei，在候选助手中即可看到 3 个 css 变量。</p></div><h2 id="条件编译" tabindex="-1">条件编译 <a class="header-anchor" href="#条件编译" aria-label="Permalink to &quot;条件编译&quot;">​</a></h2><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。 以 <code>#ifdef</code> 或 <code>#ifndef</code> 加 <code>%PLATFORM%</code> 开头，以 <code>#endif</code> 结尾。</p><div class="danger custom-block"><p class="custom-block-title">请注意</p><p>条件编译是利用注释实现的，在不同语法里注释写法不一样，js 使用 <code>// 注释</code>、css 使用 <code>/* 注释 */</code>、vue/nvue 模板里使用 <code>&lt;!-- 注释 --&gt;</code>。</p></div><ul><li>#ifdef：if defined 仅在某平台存在</li><li>#ifndef：if not defined 除了某平台均存在</li><li>%PLATFORM%：平台名称</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>支持的文件：</p><ul><li>.vue</li><li>.js</li><li>.css</li><li>pages.json</li><li>各预编译语言文件，如：.scss、.less、.stylus、.ts、.pug</li></ul></div><h3 id="script" tabindex="-1">script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;script&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//#ifndef H5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//#endif</span></span></code></pre></div><h3 id="template" tabindex="-1">template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;template&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;微信公众号关注组件&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- #ifdef MP-WEIXIN --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">official-account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">official-account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- #endif --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* #ifdef MP-WEIXIN */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.wx-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#fff000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* #endif */</span></span></code></pre></div><h3 id="pages-json" tabindex="-1">pages.json <a class="header-anchor" href="#pages-json" aria-label="Permalink to &quot;pages.json&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef APP-PLUS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/api/speech/speech&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;navigationBarTitleText&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;语音识别&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><h2 id="pages-json-页面路由" tabindex="-1">pages.json 页面路由 <a class="header-anchor" href="#pages-json-页面路由" aria-label="Permalink to &quot;pages.json 页面路由&quot;">​</a></h2><h3 id="globalstyle" tabindex="-1">globalStyle <a class="header-anchor" href="#globalstyle" aria-label="Permalink to &quot;globalStyle&quot;">​</a></h3><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F8F8F8</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>black</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>navigationStyle</td><td>String</td><td>default</td><td>导航栏样式，仅支持 default/custom。custom 即取消默认的原生导航栏</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>下拉显示出来的窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持 px</td></tr><tr><td>pageOrientation</td><td>String</td><td>portrait</td><td>横屏配置，屏幕旋转设置，仅支持 auto / portrait / landscape</td></tr><tr><td>renderingMode</td><td>String</td><td></td><td>同层渲染，webrtc(实时音视频) 无法正常时尝试配置 seperated 强制关掉同层</td></tr></tbody></table><h3 id="pages" tabindex="-1">pages <a class="header-anchor" href="#pages" aria-label="Permalink to &quot;pages&quot;">​</a></h3><p>通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td>用于设置每个页面的状态栏、导航条、标题、窗口背景色等。</td></tr></tbody></table><h4 id="style" tabindex="-1">style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;style&quot;">​</a></h4><p>页面中配置项会覆盖 globalStyle 中相同的配置项。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F8F8F8</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>black</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>navigationBarShadow</td><td>Object</td><td></td><td>导航栏阴影</td></tr><tr><td>navigationStyle</td><td>String</td><td>default</td><td>导航栏样式，仅支持 default/custom。custom 即取消默认的原生导航栏</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark/light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持 px</td></tr></tbody></table><h5 id="自定义导航栏" tabindex="-1">自定义导航栏 <a class="header-anchor" href="#自定义导航栏" aria-label="Permalink to &quot;自定义导航栏&quot;">​</a></h5><p>不同手机的安全区域不同，适配安全区域能防止页面重要内容被遮挡。可通过 <code>uni.getSystemInfoSync()</code> 获取屏幕边界到安全区的距离。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取屏幕边界到安全区域距离</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">safeAreaInsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfoSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="easycom" tabindex="-1">easycom <a class="header-anchor" href="#easycom" aria-label="Permalink to &quot;easycom&quot;">​</a></h3><p>只要组件路径符合规范（即：安装在项目根目录的 components 目录下，并符合 <code>components/组件名称/组件名称.vue</code>），就可以不用引用、注册，直接在页面中使用。</p><h4 id="自定义-easycom-配置" tabindex="-1">自定义 easycom 配置 <a class="header-anchor" href="#自定义-easycom-配置" aria-label="Permalink to &quot;自定义 easycom 配置&quot;">​</a></h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>autoscan</td><td>Boolean</td><td>true</td><td>是否开启自动扫描，开启后将会自动扫描符合 components/组件名称/组件名称.vue 目录结构的组件</td></tr><tr><td>custom</td><td>Object</td><td></td><td>以正则方式自定义组件匹配规则。如果 autoscan 不能满足需求，可以使用 custom 自定义匹配规则</td></tr></tbody></table><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;easycom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;autoscan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;^uni-(.*)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@/components/uni-$1.vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="tabbar" tabindex="-1">tabBar <a class="header-anchor" href="#tabbar" aria-label="Permalink to &quot;tabBar&quot;">​</a></h3><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，最少 2 个、最多 5 个 tab</td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td></tr></tbody></table><h4 id="list-属性" tabindex="-1">list 属性 <a class="header-anchor" href="#list-属性" aria-label="Permalink to &quot;list 属性&quot;">​</a></h4><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为 40kb，建议尺寸为 81px _ 81px，当 position 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px _ 81px ，当 position 为 top 时，此参数无效</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>代码跳转到 tabbar 页面，api 只能使用 <code>uni.switchTab</code>，不能使用 <code>uni.navigateTo</code> <code>uni.redirectTo</code>；使用 navigator 组件跳转时必须设置 <code>open-type=&quot;switchTab&quot;</code>。</p></div><h3 id="subpackages" tabindex="-1">subPackages <a class="header-anchor" href="#subpackages" aria-label="Permalink to &quot;subPackages&quot;">​</a></h3><p>subPackages 节点接收一个数组，数组每一项都是应用的子包，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>root</td><td>String</td><td>是</td><td>子包的根目录</td></tr><tr><td>pages</td><td>Array</td><td>是</td><td>子包由哪些页面组成，参数同 pages</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>注意：</p><ul><li>subPackages 里的 pages 的路径是 root 下的相对路径，不是全路径。</li><li>微信小程序每个分包的大小是 2M，总体积一共不能超过 20M。</li></ul></div><h4 id="分包优化" tabindex="-1">分包优化 <a class="header-anchor" href="#分包优化" aria-label="Permalink to &quot;分包优化&quot;">​</a></h4><ul><li>在对应平台的配置下添加 <code>&quot;optimization&quot;:{&quot;subPackages&quot;:true}</code> 开启分包优化</li><li>分包优化具体逻辑： <ul><li>静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用</li><li>js 文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）</li><li>自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息</li></ul></li></ul><h3 id="preloadrule" tabindex="-1">preloadRule <a class="header-anchor" href="#preloadrule" aria-label="Permalink to &quot;preloadRule&quot;">​</a></h3><p>preloadRule 中，key 是页面路径，value 是进入此页面的预下载配置，每个配置有以下几项：</p><table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>packages</td><td>StringArray</td><td>是</td><td></td><td>进入页面后预下载分包的 root 或 name。<code>__APP__</code> 表示主包。</td></tr><tr><td>network</td><td>String</td><td>否</td><td>wifi</td><td>在指定网络下预下载，可选值为：all（不限网络）、wifi（仅 wifi 下预下载）</td></tr></tbody></table><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/login/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;subPackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pagesA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list/list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pagesB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;detail/detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preloadRule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;pagesA/list/list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;network&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__APP__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;pagesB/detail/detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;network&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pagesA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="manifest-json-应用配置" tabindex="-1">manifest.json 应用配置 <a class="header-anchor" href="#manifest-json-应用配置" aria-label="Permalink to &quot;manifest.json 应用配置&quot;">​</a></h2><p>用于指定应用的名称、图标、权限等。HBuilderX 创建的工程此文件在根目录，CLI 创建的工程此文件在 src 目录。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td></td><td>应用名称</td></tr><tr><td>appid</td><td>String</td><td>新建 uni-app 项目时，DCloud 云端分配</td><td>应用标识</td></tr><tr><td>description</td><td>String</td><td></td><td>应用描述</td></tr><tr><td>locale</td><td>String</td><td>auto</td><td>设置当前默认语言</td></tr><tr><td>versionName</td><td>String</td><td></td><td>版本名称，例如：1.0.0</td></tr><tr><td>versionCode</td><td>Number</td><td></td><td>版本号，例如：36</td></tr><tr><td>transformPx</td><td>Boolean</td><td>false</td><td>此选项已废弃，仅部分平台支持，不推荐新项目启用此配置</td></tr><tr><td>networkTimeout</td><td>Object</td><td></td><td>网络超时时间</td></tr><tr><td>debug</td><td>Boolean</td><td>false</td><td>是否开启 debug 模式，开启后调试信息以 info 的形式给出，其信息有页面的注册，页面路由，数据更新，事件触发等</td></tr><tr><td>uniStatistics</td><td>Object</td><td></td><td>是否开启 uni 统计，全局配置</td></tr><tr><td>mp-weixin</td><td>Object</td><td></td><td>微信小程序特有配置</td></tr><tr><td>vueVersion</td><td>String</td><td></td><td>Vue 版本号</td></tr></tbody></table><h3 id="networktimeout-属性" tabindex="-1">networkTimeout 属性 <a class="header-anchor" href="#networktimeout-属性" aria-label="Permalink to &quot;networkTimeout 属性&quot;">​</a></h3><p>各类网络请求的超时时间，单位均为毫秒。</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>Number</td><td>否</td><td>60000</td><td>uni.request 的超时时间</td></tr><tr><td>connectSocket</td><td>Number</td><td>否</td><td>60000</td><td>uni.connectSocket 的超时时间</td></tr><tr><td>uploadFile</td><td>Number</td><td>否</td><td>60000</td><td>uni.uploadFile 的超时时间</td></tr><tr><td>downloadFile</td><td>Number</td><td>否</td><td>60000</td><td>uni.downloadFile 的超时时间</td></tr></tbody></table><h3 id="unistatistics-属性" tabindex="-1">uniStatistics 属性 <a class="header-anchor" href="#unistatistics-属性" aria-label="Permalink to &quot;uniStatistics 属性&quot;">​</a></h3><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>enable</td><td>Boolean</td><td>是</td><td>true</td><td>是否开启 uni 统计</td></tr></tbody></table><h3 id="mp-weixin-属性" tabindex="-1">mp-weixin 属性 <a class="header-anchor" href="#mp-weixin-属性" aria-label="Permalink to &quot;mp-weixin 属性&quot;">​</a></h3><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>appid</td><td>String</td><td>微信小程序的 AppID</td></tr><tr><td>setting</td><td>Object</td><td>微信小程序项目设置</td></tr><tr><td>functionalPages</td><td>Boolean</td><td>微信小程序是否启用插件功能页，默认关闭</td></tr><tr><td>requiredBackgroundModes</td><td>Array</td><td>微信小程序需要在后台使用的能力</td></tr><tr><td>plugins</td><td>Object</td><td>使用到的插件</td></tr><tr><td>resizable</td><td>Boolean</td><td>在 iPad 上小程序是否支持屏幕旋转，默认关闭</td></tr><tr><td>navigateToMiniProgramAppIdList</td><td>Array</td><td>需要跳转的小程序列表</td></tr><tr><td>permission</td><td>Object</td><td>微信小程序接口权限相关设置</td></tr><tr><td>workers</td><td>String</td><td>Worker</td></tr><tr><td>optimization</td><td>Object</td><td>对微信小程序的优化配置</td></tr><tr><td>cloudfunctionRoot</td><td>String</td><td>配置云开发目录</td></tr><tr><td>uniStatistics</td><td>Object</td><td>微信小程序是否开启 uni 统计，配置方法同全局配置</td></tr><tr><td>scopedSlotsCompiler</td><td>String</td><td>Vue2 作用域插槽编译模式，uni-app 3.1.19+ 开始支持，可选：legacy、auto、augmented，默认：auto</td></tr><tr><td>mergeVirtualHostAttributes</td><td>Boolean</td><td>合并组件虚拟节点外层属性（目前仅支持 style、class 属性）</td></tr><tr><td>slotMultipleInstance</td><td>Boolean</td><td>模拟单个作用域插槽渲染为多个实例，此配置仅限 Vue2 环境 3.7.12+，Vue3 环境已默认支持</td></tr><tr><td>embeddedAppIdList</td><td>Array</td><td>要半屏跳转的小程序 appid</td></tr><tr><td>requiredPrivateInfos</td><td>Array</td><td>地理位置相关接口</td></tr><tr><td>lazyCodeLoading</td><td>String</td><td>目前仅支持值 requiredComponents，代表开启小程序按需注入特性</td></tr></tbody></table><h4 id="setting-属性" tabindex="-1">setting 属性 <a class="header-anchor" href="#setting-属性" aria-label="Permalink to &quot;setting 属性&quot;">​</a></h4><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>urlCheck</td><td>Boolean</td><td>是否检查安全域名和 TLS 版本</td></tr><tr><td>es6</td><td>Boolean</td><td>ES6 转 ES5</td></tr><tr><td>postcss</td><td>Boolean</td><td>上传代码时样式是否自动补全</td></tr><tr><td>minified</td><td>Boolean</td><td>上传代码时是否自动压缩</td></tr><tr><td>bigPackageSizeSupport</td><td>Boolean</td><td>预览及真机调试时包体积上限是否调整为 4M，默认为 true</td></tr></tbody></table><h4 id="optimization-属性" tabindex="-1">optimization 属性 <a class="header-anchor" href="#optimization-属性" aria-label="Permalink to &quot;optimization 属性&quot;">​</a></h4><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>subPackages</td><td>Boolean</td><td>是否开启分包优化</td></tr></tbody></table><h2 id="app-vue" tabindex="-1">App.vue <a class="header-anchor" href="#app-vue" aria-label="Permalink to &quot;App.vue&quot;">​</a></h2><p>所有页面都是在 App.vue 下进行切换的，是应用入口文件。但 App.vue 本身不是页面，这里不能编写视图元素，也就是没有 <code>&lt;template&gt;</code>。</p><p>这个文件的作用包括：监听应用生命周期、配置全局样式、配置全局变量。</p><h3 id="应用生命周期" tabindex="-1">应用生命周期 <a class="header-anchor" href="#应用生命周期" aria-label="Permalink to &quot;应用生命周期&quot;">​</a></h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当 uni-app 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 uni-app 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 uni-app 从前台进入后台</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>注意：应用生命周期仅可在 App.vue 中监听，在其它页面监听无效。</p></div><h3 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h3><p>小程序有 globalData，这是一种简单的全局变量机制。当然，vue 框架的全局变量，另有其他方式定义。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>js 中操作 globalData 的方式如下： <code>getApp().globalData.text = &#39;test&#39;</code></li><li>在应用 onLaunch 时，getApp 对象还未获取，暂时可以使用 this.globalData 获取 globalData。</li><li>如果需要把 globalData 的数据绑定到页面上，可在页面的 onShow 页面生命周期里进行变量重赋值。</li></ul></div><h3 id="全局样式" tabindex="-1">全局样式 <a class="header-anchor" href="#全局样式" aria-label="Permalink to &quot;全局样式&quot;">​</a></h3><p>在 App.vue 中，可以定义一些全局通用样式，例如需要加一个通用的背景色，首屏页面渲染的动画等都可以写在 App.vue 中。</p><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onLaunch, onShow, onHide } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onLaunch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App Launch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App Show&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onHide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App Hide&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  globalData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./common/uni.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="main-js" tabindex="-1">main.js <a class="header-anchor" href="#main-js" aria-label="Permalink to &quot;main.js&quot;">​</a></h2><p>main.js 是 uni-app 的入口文件，主要作用是初始化 vue 实例、定义全局组件、使用需要的插件如 i18n、pinia。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createSSRApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createSSRApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="uni-scss" tabindex="-1">uni.scss <a class="header-anchor" href="#uni-scss" aria-label="Permalink to &quot;uni.scss&quot;">​</a></h2><p>uni.scss 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss 文件里预置了一批 scss 变量预置。</p><p>uni.scss 是一个特殊文件，在代码中无需 import 这个文件即可在 scss 代码中使用这里的样式变量。uni-app 的编译器在 webpack 配置中特殊处理了这个 uni.scss，使得每个 scss 文件都被注入这个 uni.scss，达到全局可用的效果。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$uni-color-primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="uni-app-组件" tabindex="-1">uni-app 组件 <a class="header-anchor" href="#uni-app-组件" aria-label="Permalink to &quot;uni-app 组件&quot;">​</a></h2><h3 id="视图容器" tabindex="-1">视图容器 <a class="header-anchor" href="#视图容器" aria-label="Permalink to &quot;视图容器&quot;">​</a></h3><ul><li><code>&lt;view&gt;</code>：视图容器。它类似于传统html中的div，用于包裹各种元素内容。</li><li><code>&lt;scroll-view&gt;</code>：可滚动视图区域。用于区域滚动。</li><li><code>&lt;swiper&gt;</code>：滑块视图容器。一般用于左右滑动或上下滑动，比如banner轮播图。</li><li><code>&lt;match-media&gt;</code>：media query 匹配检测节点。类似于网页开发中使用媒体查询来适配大屏小屏，match-media是一个可适配不同屏幕的基本视图组件。可以指定一组 media query 媒体查询规则，满足查询条件时，这个组件才会被展示。</li><li><code>&lt;movable-area&gt;</code>：可拖动区域。</li><li><code>&lt;movable-view&gt;</code>：可移动的视图容器，在页面中可以拖拽滑动或双指缩放。必须在<code>&lt;movable-area&gt;</code>组件中，并且必须是直接子节点，否则不能移动。</li><li><code>&lt;cover-view&gt;</code>：覆盖在原生组件上的文本视图。</li><li><code>&lt;cover-image&gt;</code>：覆盖在原生组件上的图片视图。可覆盖的原生组件同cover-view，支持嵌套在cover-view里。</li></ul><h3 id="文本容器" tabindex="-1">文本容器 <a class="header-anchor" href="#文本容器" aria-label="Permalink to &quot;文本容器&quot;">​</a></h3><ul><li><code>&lt;icon&gt;</code>：图标。</li><li><code>&lt;text&gt;</code>：文本。</li><li><code>&lt;rich-text&gt;</code>：富文本。支持默认事件，包括：click、touchstart、touchmove、touchcancel、touchend、longpress。</li><li><code>&lt;progress&gt;</code>：进度条。</li></ul><h3 id="表单" tabindex="-1">表单 <a class="header-anchor" href="#表单" aria-label="Permalink to &quot;表单&quot;">​</a></h3><ul><li><code>&lt;button&gt;</code>：按钮。</li><li><code>&lt;checkbox-group&gt;</code>：多项选择器，内部由多个 checkbox 组成。</li><li><code>&lt;checkbox&gt;</code>：多选项目。</li><li><code>&lt;editor&gt;</code>：富文本编辑器，可以对图片、文字格式进行编辑和混排。</li><li><code>&lt;form&gt;</code>：表单。</li><li><code>&lt;input&gt;</code>：单行输入框。</li><li><code>&lt;label&gt;</code>：用来改进表单组件的可用性，使用for属性找到对应的id，或者将控件放在该标签下，当点击时，就会触发对应的控件。</li><li><code>&lt;picker&gt;</code>：从底部弹起的滚动选择器。支持五种选择器，通过mode来区分，分别是普通选择器，多列选择器，时间选择器，日期选择器，省市区选择器，默认是普通选择器。</li><li><code>&lt;picker-view&gt;</code>：嵌入页面的滚动选择器。</li><li><code>&lt;radio-group&gt;</code>：单项选择器，内部由多个 <code>&lt;radio&gt;</code> 组成。通过把多个radio包裹在一个radio-group下，实现这些radio的单选。</li><li><code>&lt;radio&gt;</code>：单选项目。</li><li><code>&lt;slider&gt;</code>：滑动选择器。</li><li><code>&lt;switch&gt;</code>：开关选择器。</li><li><code>&lt;textarea&gt;</code>：多行输入框。</li></ul><h3 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h3><ul><li><code>&lt;navigator&gt;</code>：页面跳转。</li></ul><h3 id="媒体" tabindex="-1">媒体 <a class="header-anchor" href="#媒体" aria-label="Permalink to &quot;媒体&quot;">​</a></h3><ul><li><code>&lt;audio&gt;</code>：音频。</li><li><code>&lt;camera&gt;</code>：页面内嵌的区域相机组件。注意这不是点击后全屏打开的相机。</li><li><code>&lt;image&gt;</code>：图片组件。</li><li><code>&lt;video&gt;</code>：视频播放组件。</li><li><code>&lt;live-player&gt;</code>：实时音视频播放，也称直播拉流。</li><li><code>&lt;live-pusher&gt;</code>：实时音视频录制，也称直播推流。</li></ul><h3 id="地图" tabindex="-1">地图 <a class="header-anchor" href="#地图" aria-label="Permalink to &quot;地图&quot;">​</a></h3><ul><li><code>&lt;map&gt;</code>：地图组件。地图组件用于展示地图，而定位API只是获取坐标，请勿混淆两者。</li></ul><h3 id="画布" tabindex="-1">画布 <a class="header-anchor" href="#画布" aria-label="Permalink to &quot;画布&quot;">​</a></h3><ul><li><code>&lt;canvas&gt;</code>：画布组件。</li></ul><h3 id="web-view" tabindex="-1">web-view <a class="header-anchor" href="#web-view" aria-label="Permalink to &quot;web-view&quot;">​</a></h3><ul><li><code>&lt;web-view&gt;</code>：web 浏览器组件，可以用来承载网页的容器，会自动铺满整个页面。</li></ul><h3 id="云数据库" tabindex="-1">云数据库 <a class="header-anchor" href="#云数据库" aria-label="Permalink to &quot;云数据库&quot;">​</a></h3><ul><li><code>&lt;unicloud-db&gt;</code>：数据库查询组件，它是对clientDB的js库的再封装。</li></ul><h3 id="页面属性配置节点" tabindex="-1">页面属性配置节点 <a class="header-anchor" href="#页面属性配置节点" aria-label="Permalink to &quot;页面属性配置节点&quot;">​</a></h3><ul><li><code>&lt;page-meta&gt;</code>：页面属性配置节点，用于指定页面的一些属性、监听页面事件。可部分替代pages.json的功能。</li><li><code>&lt;navigation-bar&gt;</code>：页面导航条配置节点，用于指定导航栏的一些属性。只能是 page-meta 组件内的第一个节点，需要配合它一同使用。</li></ul><h2 id="uni-ui-组件" tabindex="-1">uni-ui 组件 <a class="header-anchor" href="#uni-ui-组件" aria-label="Permalink to &quot;uni-ui 组件&quot;">​</a></h2><h3 id="安装-uni-ui" tabindex="-1">安装 uni-ui <a class="header-anchor" href="#安装-uni-ui" aria-label="Permalink to &quot;安装 uni-ui&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @dcloudio/uni-ui</span></span></code></pre></div><h3 id="配置-easycom" tabindex="-1">配置 easycom <a class="header-anchor" href="#配置-easycom" aria-label="Permalink to &quot;配置 easycom&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pages.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;easycom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;autoscan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // uni-ui 规则如下配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;^uni-(.*)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@dcloudio/uni-ui/lib/uni-$1/uni-$1.vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="uni-sass-辅助样式" tabindex="-1">uni-sass 辅助样式 <a class="header-anchor" href="#uni-sass-辅助样式" aria-label="Permalink to &quot;uni-sass 辅助样式&quot;">​</a></h3><h4 id="使用scss变量" tabindex="-1">使用scss变量 <a class="header-anchor" href="#使用scss变量" aria-label="Permalink to &quot;使用scss变量&quot;">​</a></h4><p>在项目的根目录的uni.scss文件引入变量文件，即可使用或修改对应的scss变量.</p><h4 id="使用类名" tabindex="-1">使用类名 <a class="header-anchor" href="#使用类名" aria-label="Permalink to &quot;使用类名&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/uni_modules/uni-scss/index.scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>颜色：前景色可以直接使用变量名同名的类，背景色可以在上面变量名的基础上加是 <code>-bg</code></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 前景色 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-primary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;主色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;成功色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-warning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;警告色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;错误色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 背景色 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-primary-bg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;主色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-success-bg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;成功色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-warning-bg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;警告色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-error-bg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;错误色&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>边框半径：使用边框半径辅助样式对元素快速应用<code>border-radius</code>样式，规则为 <code>uni-radius-\${direction}-\${size}</code></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-radius-tl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;设置左上圆角&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-radius-br&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;设置右下圆角&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>direction：如果需要四边，则不需要指定 direction。</p><ul><li>t：左上 + 右上</li><li>r：右上 + 右下</li><li>b：左下 + 右下</li><li>l：左上 + 左下</li><li>tl：左上</li><li>tr：右上</li><li>bl：左下</li><li>br：右下</li></ul></li><li><p>size：基于 <code>$border-radius-root</code> 变量的四舍五入尺寸，该变量的默认值为0.25rpx。</p><ul><li>null：使用默认值大小(可忽略)</li><li>0：清理所有圆角</li><li>sm：默认值 / 2</li><li>lg：默认值 * 2</li><li>xl：默认值 * 6</li><li>pill：9999px</li><li>circle：50% (nvue 下不生效)</li></ul></li></ul></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 uni.scss 中修改默认值:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-radius-root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:20px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    0: 0,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &#39;sm&#39;: $</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-radius-root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> / 2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    null: $</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-radius-root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &#39;lg&#39;: $</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-radius-root</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &#39;xl&#39;: $</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-radius-root</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 6,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &#39;pill&#39;: 9999px,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &#39;circle&#39;: 50%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span></code></pre></div></div><ul><li>间距：使用间距辅助类对元素快速应用 <code>margin</code> 或 <code>padding</code> 样式， 范围是从 0 到 16。规则为 <code>uni-\${property}\${direction}-\${size}</code>。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- margin-top 为 8px --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-mt-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 左右margin 为 8px--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-mx-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 上下 padding 为 20px --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni-py-5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>property <ul><li>m：应用 <code>margin</code></li><li>p：应用 <code>padding</code></li></ul></li><li>direction <ul><li>t：应用 <code>margin-top</code> 和 <code>padding-top</code> 的间距</li><li>r：应用 <code>margin-righ</code>t 和 <code>padding-right</code> 的间距</li><li>b：应用 <code>margin-bottom</code> 和 <code>padding-bottom</code> 的间距</li><li>l：应用 <code>margin-left</code> 和 <code>padding-left</code> 的间距</li><li>x：应用 <code>*-left</code> 和 <code>*-right</code> 的间距</li><li>y：应用 <code>*-top</code> 和 <code>*-bottom</code> 的间距</li><li>a：在所有方向应用该间距</li></ul></li><li>size：以4px增量控制间距属性。 <ul><li>0：通过设置为 0 来消除所有 <code>margin</code> 或 <code>padding</code>.</li><li>1：设置 <code>margin</code> 或 <code>padding</code> 为 4px</li><li>2：设置 <code>margin</code> 或 <code>padding</code> 为 8px</li><li>3：设置 <code>margin</code> 或 <code>padding</code> 为 12px</li><li>4：设置 <code>margin</code> 或 <code>padding</code> 为 16px</li><li>5：设置 <code>margin</code> 或 <code>padding</code> 为 20px</li><li>6：设置 <code>margin</code> 或 <code>padding</code> 为 24px</li><li>7：设置 <code>margin</code> 或 <code>padding</code> 为 28px</li><li>8：设置 <code>margin</code> 或 <code>padding</code> 为 32px</li><li>9：设置 <code>margin</code> 或 <code>padding</code> 为 36px</li><li>10：设置 <code>margin</code> 或 <code>padding</code> 为 40px</li><li>11：设置 <code>margin</code> 或 <code>padding</code> 为 44px</li><li>12：设置 <code>margin</code> 或 <code>padding</code> 为 48px</li><li>13：设置 <code>margin</code> 或 <code>padding</code> 为 52px</li><li>14：设置 <code>margin</code> 或 <code>padding</code> 为 56px</li><li>15：设置 <code>margin</code> 或 <code>padding</code> 为 60px</li><li>16：设置 <code>margin</code> 或 <code>padding</code> 为 64px</li><li>n1：设置 <code>margin</code> 或 <code>padding</code> 为 -4px</li><li>n2：设置 <code>margin</code> 或 <code>padding</code> 为 -8px</li><li>n3：设置 <code>margin</code> 或 <code>padding</code> 为 -12px</li><li>n4：设置 <code>margin</code> 或 <code>padding</code> 为 -16px</li><li>n5：设置 <code>margin</code> 或 <code>padding</code> 为 -20px</li><li>n6：设置 <code>margin</code> 或 <code>padding</code> 为 -24px</li><li>n7：设置 <code>margin</code> 或 <code>padding</code> 为 -28px</li><li>n8：设置 <code>margin</code> 或 <code>padding</code> 为 -32px</li><li>n9：设置 <code>margin</code> 或 <code>padding</code> 为 -36px</li><li>n10：设置 <code>margin</code> 或 <code>padding</code> 为 -40px</li><li>n11：设置 <code>margin</code> 或 <code>padding</code> 为 -44px</li><li>n12：设置 <code>margin</code> 或 <code>padding</code> 为 -48px</li><li>n13：设置 <code>margin</code> 或 <code>padding</code> 为 -52px</li><li>n14：设置 <code>margin</code> 或 <code>padding</code> 为 -56px</li><li>n15：设置 <code>margin</code> 或 <code>padding</code> 为 -60px</li><li>n16：设置 <code>margin</code> 或 <code>padding</code> 为 -64px</li></ul></li></ul></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 uni.scss 中修改默认值</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uni-space-root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:2;</span></span></code></pre></div></div><h2 id="uni-app-api" tabindex="-1">uni-app API <a class="header-anchor" href="#uni-app-api" aria-label="Permalink to &quot;uni-app API&quot;">​</a></h2><h3 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-label="Permalink to &quot;定时器&quot;">​</a></h3><ul><li><code>setTimeout(callback, delay, rest)</code>：设定一个定时器。在定时到期以后执行注册的回调函数。</li><li><code>clearTimeout(timeoutID)</code>：取消由 setTimeout 设置的定时器。</li><li><code>setInterval(callback, delay, rest)</code>：设定一个定时器。按照指定的周期（以毫秒计）来执行注册的回调函数。</li><li><code>clearInterval(intervalID)</code>：取消由 setInterval 设置的定时器。</li></ul><h3 id="arraybuffer-base64" tabindex="-1">ArrayBuffer / Base64 <a class="header-anchor" href="#arraybuffer-base64" aria-label="Permalink to &quot;ArrayBuffer / Base64&quot;">​</a></h3><ul><li><code>uni.base64ToArrayBuffer(base64)</code>：将 Base64 字符串转成 ArrayBuffer 对象。</li><li><code>uni.arrayBufferToBase64(arrayBuffer)</code>：将 ArrayBuffer 对象转成 Base64 字符串。</li></ul><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><ul><li><code>uni.getLaunchOptionsSync()</code>：获取启动时的参数。返回值与App.onLaunch的回调参数一致。</li><li><code>uni.getEnterOptionsSync()</code>：获取启动时的参数。如果当前小程序是冷启动，则返回值与 App.onLaunch 的回调参数一致；如果当前是热启动，则返回值与 App.onShow 一致。</li></ul><h3 id="应用级事件" tabindex="-1">应用级事件 <a class="header-anchor" href="#应用级事件" aria-label="Permalink to &quot;应用级事件&quot;">​</a></h3><ul><li><code>uni.onPageNotFound(callback)</code>：监听应用要打开的页面不存在事件。该事件与 App.onPageNotFound 的回调时机一致。</li><li><code>uni.onError(callback)</code>：监听小程序错误事件。如脚本错误或 API 调用报错等。该事件与 App.onError 的回调时机与参数一致。</li><li><code>uni.onAppShow(callback)</code>：监听应用切前台事件。该事件与 App.onShow 的回调参数一致。</li><li><code>uni.onAppHide(callback)</code>：监听应用切后台事件。该事件与 App.onHide 的回调参数一致。</li><li><code>uni.offPageNotFound(callback)</code>：取消监听应用要打开的页面不存在事件。</li><li><code>uni.offError(callback)</code>：取消监听应用错误事件。</li><li><code>uni.offAppShow(callback)</code>：取消监听小程序切前台事件。</li><li><code>uni.offAppHide(callback)</code>：取消监听小程序切后台事件。</li></ul><h3 id="拦截器" tabindex="-1">拦截器 <a class="header-anchor" href="#拦截器" aria-label="Permalink to &quot;拦截器&quot;">​</a></h3><ul><li><code>uni.addInterceptor(string, object)</code>：添加拦截器。</li><li><code>uni.removeInterceptor(string)</code>：删除拦截器。</li></ul><h3 id="全局api" tabindex="-1">全局API <a class="header-anchor" href="#全局api" aria-label="Permalink to &quot;全局API&quot;">​</a></h3><ul><li><code>uniIDHasRole(string)</code>：判断当前用户是否拥有某角色。此功能依赖<code>uni-id</code>。</li><li><code>uniIDHasPermission(string)</code>：判断当前用户是否拥有某权限，注意：admin角色的用户拥有所有权限。此功能依赖<code>uni-id</code>。</li></ul><h3 id="发起请求" tabindex="-1">发起请求 <a class="header-anchor" href="#发起请求" aria-label="Permalink to &quot;发起请求&quot;">​</a></h3><ul><li><code>uni.request(object)</code>：发起网络请求。</li></ul><h3 id="上传下载" tabindex="-1">上传下载 <a class="header-anchor" href="#上传下载" aria-label="Permalink to &quot;上传下载&quot;">​</a></h3><ul><li><code>uni.uploadFile(object)</code>：将本地资源上传到开发者服务器，客户端发起一个 <code>POST</code> 请求，其中 <code>content-type</code> 为 <code>multipart/form-data</code>。</li><li><code>uni.downloadFile(object)</code>：下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地临时路径。</li></ul><h3 id="路由-1" tabindex="-1">路由 <a class="header-anchor" href="#路由-1" aria-label="Permalink to &quot;路由&quot;">​</a></h3><ul><li><code>uni.navigateTo(object)</code>：保留当前页面，跳转到应用内的非 tabBar 页面，使用<code>uni.navigateBack</code>可以返回到原页面。</li><li><code>uni.redirectTo(object)</code>：关闭当前页面，跳转到应用内的非 tabBar 页面。</li><li><code>uni.reLaunch(object)</code>：关闭所有页面，打开到应用内的某个页面。</li><li><code>uni.switchTab(object)</code>：只能跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。</li><li><code>uni.navigateBack(object)</code>：关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</li></ul><h3 id="事件监听" tabindex="-1">事件监听 <a class="header-anchor" href="#事件监听" aria-label="Permalink to &quot;事件监听&quot;">​</a></h3><ul><li><code>EventChannel.emit(eventName, args)</code>：触发一个事件。</li><li><code>EventChannel.off(eventName, callback)</code>：取消监听一个事件。给出第二个参数时，只取消给出的监听函数，否则取消所有监听函数。</li><li><code>EventChannel.on(eventName, callback)</code>：持续监听一个事件。</li><li><code>EventChannel.once(eventName, callback)</code>：监听一个事件一次，触发后失效。</li></ul><h3 id="页面与通讯" tabindex="-1">页面与通讯 <a class="header-anchor" href="#页面与通讯" aria-label="Permalink to &quot;页面与通讯&quot;">​</a></h3><ul><li><code>getCurrentPages()</code>：用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>每个页面实例的方法属性列表：</p><ul><li><code>page.$vm</code>：当前页面的 Vue 实例 。</li><li><code>page.route</code>：获取当前页面的路由。</li></ul></div><ul><li><code>uni.$emit(eventName,object)</code>：触发全局的自定义事件，附加参数都会传给监听器回调函数。</li><li><code>uni.$on(eventName,callback)</code>：监听全局的自定义事件，事件由 uni.$emit 触发，回调函数会接收事件触发函数的传入参数。</li><li><code>uni.$once(eventName,callback)</code>：监听全局的自定义事件，事件由 uni.$emit 触发，但仅触发一次，在第一次触发之后移除该监听器。</li><li><code>uni.$off([eventName, callback])</code>：移除全局自定义事件监听器。</li></ul><h3 id="数据缓存" tabindex="-1">数据缓存 <a class="header-anchor" href="#数据缓存" aria-label="Permalink to &quot;数据缓存&quot;">​</a></h3><ul><li><code>uni.setStorage(object)</code>：将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。</li><li><code>uni.setStorageSync(key,data)</code>：将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。</li><li><code>uni.getStorage(object)</code>：从本地缓存中异步获取指定 key 对应的内容。</li><li><code>uni.getStorageSync(key)</code>：从本地缓存中同步获取指定 key 对应的内容。</li><li><code>uni.getStorageInfo(object)</code>：异步获取当前 storage 的相关信息。</li><li><code>uni.getStorageInfoSync()</code>：同步获取当前 storage 的相关信息。</li><li><code>uni.removeStorage(object)</code>：从本地缓存中异步移除指定 key。</li><li><code>uni.removeStorageSync(key)</code>：从本地缓存中同步移除指定 key。</li><li><code>uni.clearStorage()</code>：清理本地数据缓存。</li><li><code>uni.clearStorageSync()</code>：同步清理本地数据缓存。</li></ul><h3 id="位置" tabindex="-1">位置 <a class="header-anchor" href="#位置" aria-label="Permalink to &quot;位置&quot;">​</a></h3><ul><li><code>uni.getLocation(object)</code>：获取当前的地理位置、速度。</li><li><code>uni.chooseLocation(object)</code>：打开地图选择位置。</li><li><code>uni.openLocation(object)</code>：使用应用内置地图查看位置。</li><li><code>uni.onLocationChange(callback)</code>：监听实时地理位置变化事件，需结合 <code>uni.startLocationUpdate</code> 或 <code>uni.startLocationUpdateBackground</code> 使用。</li><li><code>uni.offLocationChange(callback)</code>：移除实时地理位置变化事件的监听函数。</li><li><code>uni.onLocationChangeError(callback)</code>：监听持续定位接口返回失败时触发。</li><li><code>uni.offLocationChangeError(callback)</code>：取消注册位置更新错误回调。</li><li><code>uni.startLocationUpdate(object)</code>：开启小程序进入前台时接收位置消息。</li><li><code>uni.stopLocationUpdate(object)</code>：关闭监听实时位置变化，前后台都停止消息接收。</li><li><code>uni.startLocationUpdateBackground(object)</code>：开始监听实时地理位置信息变化事件，小程序进入前后台时均接收实时地理位置信息。</li><li><code>uni.createMapContext(mapId,this)</code>：创建并返回 map 上下文 <code>mapContext</code> 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <code>&lt;map&gt;</code> 组件。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>若想要实现城市选择功能，可以使用 <code>&lt;unicloud-city-select&gt;</code> 城市选择组件。</p></div><h3 id="图片" tabindex="-1">图片 <a class="header-anchor" href="#图片" aria-label="Permalink to &quot;图片&quot;">​</a></h3><ul><li><code>uni.chooseImage(object)</code>：从本地相册选择图片或使用相机拍照。</li><li><code>uni.previewImage(object)</code>：预览图片。</li><li><code>uni.getImageInfo(object)</code>：获取图片信息。</li><li><code>uni.saveImageToPhotosAlbum(object)</code>：保存图片到系统相册。</li><li><code>uni.compressImage(object)</code>：压缩图片接口，可选压缩质量。</li></ul><h3 id="文件" tabindex="-1">文件 <a class="header-anchor" href="#文件" aria-label="Permalink to &quot;文件&quot;">​</a></h3><ul><li><code>wx.chooseMessageFile(object)</code>：从微信聊天会话中选择文件。</li></ul><h3 id="录音管理器" tabindex="-1">录音管理器 <a class="header-anchor" href="#录音管理器" aria-label="Permalink to &quot;录音管理器&quot;">​</a></h3><ul><li><code>uni.getRecorderManager()</code>：获取全局唯一的录音管理器 recorderManager 对象。</li></ul><h3 id="视频" tabindex="-1">视频 <a class="header-anchor" href="#视频" aria-label="Permalink to &quot;视频&quot;">​</a></h3><ul><li><code>uni.chooseVideo(OBJECT)</code>：拍摄视频或从手机相册中选视频，返回视频的临时文件路径。</li><li><code>uni.chooseMedia(OBJECT)</code>：拍摄或从手机相册中选择图片或视频。</li><li><code>uni.saveVideoToPhotosAlbum(OBJECT)</code>：保存视频到系统相册。</li><li><code>uni.getVideoInfo(OBJECT)</code>：获取视频详细信息。</li><li><code>uni.compressVideo(OBJECT)</code>：压缩视频接口。开发者可指定压缩质量 quality 进行压缩。当需要更精细的控制时，可指定 bitrate、fps、和 resolution，当 quality 传入时，这三个参数将被忽略。原视频的相关信息可通过 getVideoInfo 获取。</li><li><code>uni.openVideoEditor(OBJECT)</code>：打开视频编辑器。</li></ul><h3 id="音频组件控制" tabindex="-1">音频组件控制 <a class="header-anchor" href="#音频组件控制" aria-label="Permalink to &quot;音频组件控制&quot;">​</a></h3><ul><li><code>uni.createInnerAudioContext()</code>：创建并返回内部 audio 上下文 innerAudioContext 对象。</li></ul><h3 id="视频组件控制" tabindex="-1">视频组件控制 <a class="header-anchor" href="#视频组件控制" aria-label="Permalink to &quot;视频组件控制&quot;">​</a></h3><ul><li><code>uni.createVideoContext(videoId, this)</code>：创建并返回 video 上下文 videoContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <code>&lt;video&gt;</code> 组件。</li></ul><h3 id="相机组件控制" tabindex="-1">相机组件控制 <a class="header-anchor" href="#相机组件控制" aria-label="Permalink to &quot;相机组件控制&quot;">​</a></h3><ul><li><code>uni.createCameraContext()</code>：创建并返回 camera 组件的上下文 cameraContext 对象。</li></ul><h3 id="直播组件控制" tabindex="-1">直播组件控制 <a class="header-anchor" href="#直播组件控制" aria-label="Permalink to &quot;直播组件控制&quot;">​</a></h3><ul><li><code>uni.createLivePlayerContext(livePlayerId, this)</code>：创建 live-player 上下文 livePlayerContext 对象。注意是直播的播放而不是推流。</li><li><code>ni.createLivePusherContext(livePusherId, this)</code>：创建 live-pusher 上下文 livePusherContext 对象。</li></ul><h3 id="富文本" tabindex="-1">富文本 <a class="header-anchor" href="#富文本" aria-label="Permalink to &quot;富文本&quot;">​</a></h3><ul><li><code>editorContext</code>：editor 组件对应的 editorContext 实例，可通过 uni.createSelectorQuery 获取。</li></ul><h3 id="音视频合成" tabindex="-1">音视频合成 <a class="header-anchor" href="#音视频合成" aria-label="Permalink to &quot;音视频合成&quot;">​</a></h3><ul><li><code>uni.createMediaContainer()</code>：创建音视频处理容器，最终可将容器中的轨道合成一个视频 ，返回 MediaContainer 对象。</li></ul><h3 id="系统" tabindex="-1">系统 <a class="header-anchor" href="#系统" aria-label="Permalink to &quot;系统&quot;">​</a></h3><ul><li><code>uni.getSystemInfo(OBJECT)</code>：异步获取系统信息。如运行应用的设备、设备的操作系统、基于操作系统的定制（Android系统特有概念）、运行应用的宿主程序、uni-app框架相关的信息、开发者的应用相关的信息。</li><li><code>uni.getSystemInfoSync()</code>：同步获取系统信息。</li><li><code>uni.getDeviceInfo()</code>：获取设备基础信息。</li><li><code>uni.getWindowInfo()</code>：获取窗口信息。</li><li><code>uni.getAppBaseInfo()</code>：获取微信 APP 基础信息。</li><li><code>uni.getAppAuthorizeSetting()</code>：获取 APP 授权设置。</li><li><code>uni.getSystemSetting()</code>：获取设备设置。</li><li><code>uni.openAppAuthorizeSetting()</code>：跳转系统授权管理页。</li></ul><h3 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h3><ul><li><code>uni.onMemoryWarning(CALLBACK)</code>：监听内存不足告警事件。</li><li><code>uni.offMemoryWarning(CALLBACK)</code>：取消监听内存不足告警事件。不传入 callback 则取消所有监听。</li></ul><h3 id="网络状态" tabindex="-1">网络状态 <a class="header-anchor" href="#网络状态" aria-label="Permalink to &quot;网络状态&quot;">​</a></h3><ul><li><code>uni.getNetworkType(OBJECT)</code>：获取网络类型。</li><li><code>uni.onNetworkStatusChange(CALLBACK)</code>：监听网络状态变化。可使用<code>uni.offNetworkStatusChange</code>取消监听。</li><li><code>uni.offNetworkStatusChange(CALLBACK)</code>：取消监听网络状态变化。</li></ul><h3 id="系统主题" tabindex="-1">系统主题 <a class="header-anchor" href="#系统主题" aria-label="Permalink to &quot;系统主题&quot;">​</a></h3><ul><li><code>uni.onThemeChange(CALLBACK)</code>：监听系统主题状态变化。</li><li><code>uni.offThemeChange(CALLBACK)</code>：取消监听系统主题状态变化。</li></ul><h3 id="加速度计" tabindex="-1">加速度计 <a class="header-anchor" href="#加速度计" aria-label="Permalink to &quot;加速度计&quot;">​</a></h3><ul><li><code>uni.onAccelerometerChange(CALLBACK)</code>：监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 <code>uni.offAccelerometer</code> 取消监听。</li><li><code>uni.offAccelerometerChange(CALLBACK)</code>：取消监听加速度数据。</li><li><code>uni.startAccelerometer(OBJECT)</code>：开始监听加速度数据。</li><li><code>uni.stopAccelerometer(OBJECT)</code>：停止监听加速度数据。</li></ul><h3 id="罗盘" tabindex="-1">罗盘 <a class="header-anchor" href="#罗盘" aria-label="Permalink to &quot;罗盘&quot;">​</a></h3><ul><li><code>uni.onCompassChange(CALLBACK)</code>：监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用 uni.offCompassChange 取消监听。</li><li><code>uni.offCompassChange(CALLBACK)</code>：取消监听罗盘数据。</li><li><code>uni.startCompass(OBJECT)</code>：开始监听罗盘数据。</li><li><code>uni.stopCompass(OBJECT)</code>：停止监听罗盘数据。</li></ul><h3 id="陀螺仪" tabindex="-1">陀螺仪 <a class="header-anchor" href="#陀螺仪" aria-label="Permalink to &quot;陀螺仪&quot;">​</a></h3><ul><li><code>uni.onGyroscopeChange(CALLBACK)</code>：监听陀螺仪数据变化事件。</li><li><code>uni.startGyroscope(OBJECT)</code>：开始监听陀螺仪数据。</li><li><code>uni.stopGyroscope(OBJECT)</code>：停止监听陀螺仪数据。</li></ul><h3 id="拨打电话" tabindex="-1">拨打电话 <a class="header-anchor" href="#拨打电话" aria-label="Permalink to &quot;拨打电话&quot;">​</a></h3><ul><li><code>uni.makePhoneCall(OBJECT)</code>：拨打电话。</li></ul><h3 id="扫码" tabindex="-1">扫码 <a class="header-anchor" href="#扫码" aria-label="Permalink to &quot;扫码&quot;">​</a></h3><ul><li><code>uni.scanCode(OBJECT)</code>：调起客户端扫码界面，扫码成功后返回对应的结果。</li></ul><h3 id="剪贴板" tabindex="-1">剪贴板 <a class="header-anchor" href="#剪贴板" aria-label="Permalink to &quot;剪贴板&quot;">​</a></h3><ul><li><code>uni.setClipboardData(OBJECT)</code>：设置系统剪贴板的内容。</li><li><code>uni.getClipboardData(OBJECT)</code>：获取系统剪贴板内容。</li></ul><h3 id="屏幕亮度" tabindex="-1">屏幕亮度 <a class="header-anchor" href="#屏幕亮度" aria-label="Permalink to &quot;屏幕亮度&quot;">​</a></h3><ul><li><code>uni.setScreenBrightness(OBJECT)</code>：设置屏幕亮度。</li><li><code>uni.getScreenBrightness(OBJECT)</code>：获取屏幕亮度。</li><li><code>uni.setKeepScreenOn(OBJECT)</code>：设置是否保持常亮状态。仅在当前应用生效，离开应用后设置失效。</li></ul><h3 id="截屏" tabindex="-1">截屏 <a class="header-anchor" href="#截屏" aria-label="Permalink to &quot;截屏&quot;">​</a></h3><ul><li><code>uni.onUserCaptureScreen(CALLBACK)</code>：监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件。</li><li><code>uni.offUserCaptureScreen(function callback)</code>：用户主动截屏事件。取消事件监听。</li></ul><h3 id="振动" tabindex="-1">振动 <a class="header-anchor" href="#振动" aria-label="Permalink to &quot;振动&quot;">​</a></h3><ul><li><code>uni.vibrate(OBJECT)</code>：使手机发生振动。</li><li><code>uni.vibrateLong(OBJECT)</code>：使手机发生较长时间的振动（400ms）。</li><li><code>uni.vibrateShort(OBJECT)</code>：使手机发生较短时间的振动（15ms）。</li></ul><h3 id="通讯录" tabindex="-1">通讯录 <a class="header-anchor" href="#通讯录" aria-label="Permalink to &quot;通讯录&quot;">​</a></h3><ul><li><code>uni.addPhoneContact(OBJECT)</code>：调用后，用户可以选择将该表单以“新增联系人”或“添加到已有联系人”的方式（APP端目前没有选择步骤，将直接写入），写入手机系统通讯录，完成手机通讯录联系人和联系方式的增加。</li></ul><h3 id="蓝牙" tabindex="-1">蓝牙 <a class="header-anchor" href="#蓝牙" aria-label="Permalink to &quot;蓝牙&quot;">​</a></h3><ul><li><code>uni.openBluetoothAdapter(OBJECT)</code>：初始化蓝牙模块。</li><li><code>uni.startBluetoothDevicesDiscovery(OBJECT)</code>：开始搜寻附近的蓝牙外围设备。此操作比较耗费系统资源，请在搜索并连接到设备后调用 uni.stopBluetoothDevicesDiscovery 方法停止搜索。</li><li><code>uni.onBluetoothDeviceFound(CALLBACK)</code>：监听寻找到新设备的事件。</li><li><code>uni.stopBluetoothDevicesDiscovery(OBJECT)</code>：停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。</li><li><code>uni.onBluetoothAdapterStateChange(CALLBACK)</code>：监听蓝牙适配器状态变化事件。</li><li><code>uni.getConnectedBluetoothDevices(OBJECT)</code>：根据 uuid 获取处于已连接状态的设备。</li><li><code>uni.getBluetoothDevices(OBJECT)</code>：获取在蓝牙模块生效期间所有已发现的蓝牙设备。包括已经和本机处于连接状态的设备。</li><li><code>uni.getBluetoothAdapterState(OBJECT)</code>：获取本机蓝牙适配器状态。</li><li><code>uni.closeBluetoothAdapter(OBJECT)</code>：关闭蓝牙模块。调用该方法将断开所有已建立的连接并释放系统资源。建议在使用蓝牙流程后，与 uni.openBluetoothAdapter 成对调用。</li></ul><h3 id="低功耗蓝牙" tabindex="-1">低功耗蓝牙 <a class="header-anchor" href="#低功耗蓝牙" aria-label="Permalink to &quot;低功耗蓝牙&quot;">​</a></h3><ul><li><code>uni.setBLEMTU(OBJECT)</code>：设置蓝牙最大传输单元。需在 uni.createBLEConnection调用成功后调用，mtu 设置范围 (22,512)。</li><li><code>uni.writeBLECharacteristicValue(OBJECT)</code>：向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持 write 才可以成功调用。</li><li><code>uni.readBLECharacteristicValue(OBJECT)</code>：读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持 read 才可以成功调用。</li><li><code>uni.onBLEConnectionStateChange(CALLBACK)</code>：监听低功耗蓝牙连接状态的改变事件。包括开发者主动连接或断开连接，设备丢失，连接异常断开等等。</li><li><code>uni.onBLECharacteristicValueChange(CALLBACK)</code>：监听低功耗蓝牙设备的特征值变化事件。必须先启用 notifyBLECharacteristicValueChange 接口才能接收到设备推送的 notification。</li><li><code>uni.notifyBLECharacteristicValueChange(OBJECT)</code>：启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持 notify 或者 indicate 才可以成功调用。 另外，必须先启用 notifyBLECharacteristicValueChange 才能监听到设备 characteristicValueChange 事件。</li><li><code>uni.getBLEDeviceServices(OBJECT)</code>：获取蓝牙设备所有服务(service)。</li><li><code>uni.getBLEDeviceRSSI(OBJECT)</code>：获取蓝牙设备的信号强度。</li><li><code>uni.getBLEDeviceCharacteristics(OBJECT)</code>：获取蓝牙设备某个服务中所有特征值(characteristic)。</li><li><code>uni.createBLEConnection(OBJECT)</code>：连接低功耗蓝牙设备。</li><li><code>uni.closeBLEConnection(OBJECT)</code>：断开与低功耗蓝牙设备的连接。</li></ul><h3 id="键盘" tabindex="-1">键盘 <a class="header-anchor" href="#键盘" aria-label="Permalink to &quot;键盘&quot;">​</a></h3><ul><li><code>uni.hideKeyboard()</code>：隐藏软键盘。</li><li><code>uni.onKeyboardHeightChange(CALLBACK)</code>：监听键盘高度变化。</li><li><code>uni.offKeyboardHeightChange(CALLBACK)</code>：取消监听键盘高度变化事件。</li><li><code>uni.getSelectedTextRange(OBJECT)</code>：在input、textarea等focus之后，获取输入框的光标位置。注意：只有在focus的时候调用此接口才有效。</li></ul><h3 id="交互反馈" tabindex="-1">交互反馈 <a class="header-anchor" href="#交互反馈" aria-label="Permalink to &quot;交互反馈&quot;">​</a></h3><ul><li><code>uni.showToast(OBJECT)</code>：显示消息提示框。</li><li><code>uni.hideToast()</code>：隐藏消息提示框。</li><li><code>uni.showLoading(OBJECT)</code>：显示 loading 提示框, 需主动调用 uni.hideLoading 才能关闭提示框。</li><li><code>uni.hideLoading()</code>：隐藏 loading 提示框。</li><li><code>uni.showModal(OBJECT)</code>：显示模态弹窗，可以只有一个确定按钮，也可以同时有确定和取消按钮。类似于一个API整合了 html 中：alert、confirm。</li><li><code>uni.showActionSheet(OBJECT)</code>：从底部向上弹出操作菜单。</li></ul><h3 id="设置导航条" tabindex="-1">设置导航条 <a class="header-anchor" href="#设置导航条" aria-label="Permalink to &quot;设置导航条&quot;">​</a></h3><ul><li><code>uni.setNavigationBarTitle(OBJECT)</code>：动态设置当前页面的标题。</li><li><code>uni.setNavigationBarColor(OBJECT)</code>：设置页面导航条颜色。如果需要进入页面就设置颜色，请延迟执行，防止被框架内设置颜色逻辑覆盖。</li><li><code>uni.showNavigationBarLoading(OBJECT)</code>：在当前页面显示导航条加载动画。</li><li><code>uni.hideNavigationBarLoading(OBJECT)</code>：在当前页面隐藏导航条加载动画。</li><li><code>uni.hideHomeButton(OBJECT)</code>：隐藏返回首页按钮。</li></ul><h3 id="设置tabbar" tabindex="-1">设置TabBar <a class="header-anchor" href="#设置tabbar" aria-label="Permalink to &quot;设置TabBar&quot;">​</a></h3><ul><li><code>uni.setTabBarItem(OBJECT)</code>：动态设置 tabBar 某一项的内容。</li><li><code>uni.setTabBarStyle(OBJECT)</code>：动态设置 tabBar 的整体样式。</li><li><code>uni.hideTabBar(OBJECT)</code>：隐藏 tabBar。</li><li><code>uni.showTabBar(OBJECT)</code>：显示 tabBar。</li><li><code>uni.setTabBarBadge(OBJECT)</code>：为 tabBar 某一项的右上角添加文本。</li><li><code>uni.removeTabBarBadge(OBJECT)</code>：移除 tabBar 某一项右上角的文本。</li><li><code>uni.showTabBarRedDot(OBJECT)</code>：显示 tabBar 某一项的右上角的红点。</li><li><code>uni.hideTabBarRedDot(OBJECT)</code>：隐藏 tabBar 某一项的右上角的红点。</li></ul><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><ul><li><code>uni.setBackgroundColor(OBJECT)</code>：动态设置窗口的背景色。</li><li><code>uni.setBackgroundTextStyle(OBJECT)</code>：动态设置下拉背景字体、loading 图的样式。</li></ul><h3 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h3><ul><li><code>uni.createAnimation(OBJECT)</code>：创建一个动画实例 animation。调用实例的方法来描述动画。最后通过动画实例的export方法导出动画数据传递给组件的animation属性。</li></ul><h3 id="滚动" tabindex="-1">滚动 <a class="header-anchor" href="#滚动" aria-label="Permalink to &quot;滚动&quot;">​</a></h3><ul><li><code>uni.pageScrollTo(OBJECT)</code>：将页面滚动到目标位置。可以指定滚动到具体的scrollTop数值，也可以指定滚动到某个元素的位置。</li></ul><h3 id="窗口" tabindex="-1">窗口 <a class="header-anchor" href="#窗口" aria-label="Permalink to &quot;窗口&quot;">​</a></h3><ul><li><code>uni.onWindowResize(CALLBACK)</code>：监听窗口尺寸变化事件。</li><li><code>uni.offWindowResize(CALLBACK)</code>：取消监听窗口尺寸变化事件。</li></ul><h3 id="字体" tabindex="-1">字体 <a class="header-anchor" href="#字体" aria-label="Permalink to &quot;字体&quot;">​</a></h3><ul><li><code>uni.loadFontFace(Object object)</code>：动态加载字体。</li></ul><h3 id="下拉刷新" tabindex="-1">下拉刷新 <a class="header-anchor" href="#下拉刷新" aria-label="Permalink to &quot;下拉刷新&quot;">​</a></h3><ul><li><code>uni.startPullDownRefresh(OBJECT)</code>：开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</li><li><code>uni.stopPullDownRefresh()</code>：停止当前页面下拉刷新。</li></ul><h3 id="节点信息" tabindex="-1">节点信息 <a class="header-anchor" href="#节点信息" aria-label="Permalink to &quot;节点信息&quot;">​</a></h3><ul><li><code>uni.createSelectorQuery()</code>：返回一个 SelectorQuery 对象实例。可以在这个实例上使用 select 等方法选择节点，并使用 boundingClientRect 等方法选择需要查询的信息。</li></ul><h3 id="节点布局交叉状态" tabindex="-1">节点布局交叉状态 <a class="header-anchor" href="#节点布局交叉状态" aria-label="Permalink to &quot;节点布局交叉状态&quot;">​</a></h3><ul><li><code>uni.createIntersectionObserver([this], [options])</code>：创建并返回一个 IntersectionObserver 对象实例。</li></ul><h3 id="媒体查询" tabindex="-1">媒体查询 <a class="header-anchor" href="#媒体查询" aria-label="Permalink to &quot;媒体查询&quot;">​</a></h3><ul><li><code>uni.createMediaQueryObserver([this])</code>：创建并返回一个 MediaQueryObserver 对象实例。</li></ul><h3 id="菜单" tabindex="-1">菜单 <a class="header-anchor" href="#菜单" aria-label="Permalink to &quot;菜单&quot;">​</a></h3><ul><li><code>uni.getMenuButtonBoundingClientRect()</code>：在小程序平台，如果原生导航栏被隐藏，仍然在右上角会有一个悬浮按钮，微信下也被称为胶囊按钮。本API用于获取小程序下该菜单按钮的布局位置信息，方便开发者布局顶部内容时避开该按钮。坐标信息以屏幕左上角为原点。</li></ul><h3 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h3><ul><li><code>uni.getLocale()</code>：获取当前设置的语言。</li><li><code>uni.setLocale(locale)</code>：设置当前语言。</li><li><code>uni.onLocaleChange(callback)</code>：用于监听应用语言切换。</li></ul><h3 id="文件-1" tabindex="-1">文件 <a class="header-anchor" href="#文件-1" aria-label="Permalink to &quot;文件&quot;">​</a></h3><ul><li><code>uni.saveFile(OBJECT)</code>：保存文件到本地。</li><li><code>uni.getSavedFileList(OBJECT)</code>：获取本地已保存的文件列表。</li><li><code>uni.getSavedFileInfo(OBJECT)</code>：获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件。</li><li><code>uni.removeSavedFile(OBJECT)</code>：删除本地存储的文件。</li><li><code>uni.getFileInfo(OBJECT)</code>：获取文件信息。</li><li><code>uni.openDocument(OBJECT)</code>：新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx。</li></ul><h3 id="canvas" tabindex="-1">Canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;Canvas&quot;">​</a></h3><ul><li><code>uni.createOffscreenCanvas()</code>：创建离屏 canvas 实例。</li><li><code>uni.createCanvasContext(canvasId, this)</code>：创建 canvas 绘图上下文（指定 canvasId）。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <code>&lt;canvas/&gt;</code> 组件。</li><li><code>uni.canvasToTempFilePath(object, component)</code>：把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。在自定义组件下，第二个参数传入自定义组件实例，以操作组件内 <code>&lt;canvas&gt;</code> 组件。</li><li><code>uni.canvasPutImageData(OBJECT,this)</code>：将像素数据绘制到画布的方法，在自定义组件下，第二个参数传入自定义组件实例 this，以操作组件内 <code>&lt;canvas&gt;</code> 组件。</li><li><code>uni.canvasGetImageData(OBJECT,this)</code>：返回一个数组，用来描述 canvas 区域隐含的像素数据，在自定义组件下，第二个参数传入自定义组件实例 this，以操作组件内 <code>&lt;canvas&gt;</code> 组件。</li></ul><h3 id="获取服务供应商" tabindex="-1">获取服务供应商 <a class="header-anchor" href="#获取服务供应商" aria-label="Permalink to &quot;获取服务供应商&quot;">​</a></h3><ul><li><code>uni.getProvider(OBJECT)</code>：获取服务供应商。</li></ul><h3 id="登录" tabindex="-1">登录 <a class="header-anchor" href="#登录" aria-label="Permalink to &quot;登录&quot;">​</a></h3><ul><li><code>uni.login(OBJECT)</code>：统一封装了各个平台的各种常见的登录方式，包括App手机号一键登陆、三方登录（微信、微博、QQ、Apple、google、facebook）、各家小程序内置登录。</li><li><code>uni.checkSession</code>：检查登录状态是否过期。</li><li><code>uni.getUserInfo(OBJECT)</code>：获取用户信息。</li><li><code>uni.getUserProfile(OBJECT)</code>：获取用户信息。每次请求都会弹出授权窗口，用户同意后返回 userInfo。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>微信小程序获取用户信息接口已调整，详细请参考小程序开发文档。</p></div><h3 id="分享" tabindex="-1">分享 <a class="header-anchor" href="#分享" aria-label="Permalink to &quot;分享&quot;">​</a></h3><ul><li><code>onShareAppMessage(OBJECT)</code>：小程序中用户点击分享后，在 js 中定义 onShareAppMessage 处理函数（和 onLoad 等生命周期函数同级），设置该页面的分享信息。</li><li><code>uni.showShareMenu(OBJECT)</code>：小程序的原生菜单中显示分享按钮。</li><li><code>uni.hideShareMenu(OBJECT)</code>：小程序的原生菜单中隐藏分享按钮。</li></ul><h3 id="支付" tabindex="-1">支付 <a class="header-anchor" href="#支付" aria-label="Permalink to &quot;支付&quot;">​</a></h3><ul><li><code>uni.requestPayment(OBJECT)</code>：支付。</li></ul><h3 id="推送" tabindex="-1">推送 <a class="header-anchor" href="#推送" aria-label="Permalink to &quot;推送&quot;">​</a></h3><ul><li><code>uni.getPushClientId(OBJECT)</code>：获取客户端唯一的推送标识。</li><li><code>uni.onPushMessage(callback)</code>：启动监听推送消息事件。</li><li><code>uni.offPushMessage(callback)</code>：关闭推送消息监听事件。</li><li><code>uni.getChannelManager()</code>：获取通知渠道管理器，Android 8系统以上才可以设置通知渠道。</li></ul><h3 id="实人认证" tabindex="-1">实人认证 <a class="header-anchor" href="#实人认证" aria-label="Permalink to &quot;实人认证&quot;">​</a></h3><ul><li><code>uni.startFacialRecognitionVerify(OBJECT)</code>：实人认证。</li></ul><h3 id="授权" tabindex="-1">授权 <a class="header-anchor" href="#授权" aria-label="Permalink to &quot;授权&quot;">​</a></h3><ul><li><code>uni.authorize(OBJECT)</code>：提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。如果用户之前拒绝了授权，此接口会直接进入失败回调，一般搭配uni.getSetting和uni.openSetting使用。</li></ul><h3 id="设置" tabindex="-1">设置 <a class="header-anchor" href="#设置" aria-label="Permalink to &quot;设置&quot;">​</a></h3><ul><li><code>uni.openSetting(OBJECT)</code>：调起客户端小程序设置界面，返回用户设置的操作结果。</li><li><code>uni.getSetting(OBJECT)</code>：获取用户的当前设置。</li></ul><h3 id="收货地址" tabindex="-1">收货地址 <a class="header-anchor" href="#收货地址" aria-label="Permalink to &quot;收货地址&quot;">​</a></h3><ul><li><code>uni.chooseAddress(OBJECT)</code>：获取用户收货地址。调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址，需要用户授权 scope.address。</li></ul><h3 id="获取发票抬头" tabindex="-1">获取发票抬头 <a class="header-anchor" href="#获取发票抬头" aria-label="Permalink to &quot;获取发票抬头&quot;">​</a></h3><ul><li><code>uni.chooseInvoiceTitle(OBJECT)</code>：选择用户的发票抬头，需要用户授权 scope.invoiceTitle。在微信小程序中，当前小程序必须关联一个公众号，且这个公众号是完成了微信认证的，才能调用 chooseInvoiceTitle。</li></ul><h3 id="小程序跳转" tabindex="-1">小程序跳转 <a class="header-anchor" href="#小程序跳转" aria-label="Permalink to &quot;小程序跳转&quot;">​</a></h3><ul><li><code>uni.navigateToMiniProgram(OBJECT)</code>：打开另一个小程序。</li><li><code>uni.navigateBackMiniProgram(OBJECT)</code>：跳转回上一个小程序，只有当另一个小程序跳转到当前小程序时才会能调用成功。</li><li><code>uni.openEmbeddedMiniProgram(OBJECT)</code>：微信小程序跳转小程序（半屏模式）。</li></ul><h3 id="账号信息" tabindex="-1">账号信息 <a class="header-anchor" href="#账号信息" aria-label="Permalink to &quot;账号信息&quot;">​</a></h3><ul><li><code>uni.getAccountInfoSync()</code>：获取当前帐号信息，可以返回小程序的Appid。如果使用了微信小程序的云端插件，还可以返回当前插件Appid、版本号。</li></ul><h3 id="小程序更新" tabindex="-1">小程序更新 <a class="header-anchor" href="#小程序更新" aria-label="Permalink to &quot;小程序更新&quot;">​</a></h3><ul><li><code>uni.getUpdateManager()</code>：本API返回全局唯一的版本更新管理器对象： updateManager，用于管理小程序更新。</li></ul>`,301),n=[l];function d(o,h,r,p,c,k){return t(),a("div",null,n)}const E=i(e,[["render",d]]);export{g as __pageData,E as default};
